#!/bin/bash

# Deploy script for claude-code-stuff
# Copies all contents to target directory excluding LICENSE and README.md

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration - items to exclude from deployment
EXCLUDE_ITEMS=("deploy" "LICENSE" "README.md" ".git" ".*")

# Configuration - files that should ALWAYS be ignored (never synced)
ALWAYS_IGNORE_FILES=(".DS_Store" "Thumbs.db" "desktop.ini" "*.tmp" "*.log" "*.swp" "*.swo" "*~")

# Default values
TARGET_DIR="$HOME/.claude"
SYNC_MODE=false
DRY_RUN=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --target)
            TARGET_DIR="$2"
            shift 2
            ;;
        --sync)
            SYNC_MODE=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --target DIR    Specify deployment folder root (default: ~/.claude)"
            echo "  --sync          Remove files from destination that no longer exist in source"
            echo "  --dry-run       Show what would change without making changes"
            echo "  -h, --help      Show this help message"
            echo ""
            echo "Examples:"
            echo "  $0                    # Deploy to ~/.claude (merge mode)"
            echo "  $0 --target /tmp/test # Deploy to /tmp/test (merge mode)"
            echo "  $0 --sync             # Deploy to ~/.claude (sync mode)"
            echo "  $0 --dry-run          # Show what would change (merge mode)"
            echo "  $0 --target /tmp/test --sync --dry-run # Show what would change (sync mode)"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Unknown option: $1${NC}"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

if [ "$DRY_RUN" = true ]; then
    echo -e "${YELLOW}üîç DRY RUN: Analyzing changes for claude-code-stuff deployment${NC}"
else
    echo -e "${BLUE}üöÄ Deploying claude-code-stuff to $TARGET_DIR${NC}"
fi
echo -e "${BLUE}Source: $SCRIPT_DIR${NC}"
echo -e "${BLUE}Target: $TARGET_DIR${NC}"
echo -e "${BLUE}Mode: $([ "$SYNC_MODE" = true ] && echo "sync (remove extra files)" || echo "merge (add/update only)")${NC}"
echo

# Check if target directory exists
if [ ! -d "$TARGET_DIR" ]; then
    echo -e "${RED}‚ùå Error: Target directory $TARGET_DIR does not exist${NC}"
    echo -e "${YELLOW}üí° Please create the target directory first${NC}"
    exit 1
fi

# Function to format rsync output for dry-run
format_rsync_output() {
    local line="$1"
    local full_path="$2"
    
    # Skip empty lines and summary lines
    if [[ -z "$line" || "$line" =~ ^(sending|receiving|sent|total) ]]; then
        return
    fi
    
    # Parse rsync output
    if [[ "$line" =~ ^deleting ]]; then
        echo -e "${RED}[DELETE] $full_path${NC}"
    elif [[ "$line" =~ ^[^/].*$ ]]; then
        # New file (doesn't start with ./)
        echo -e "${PURPLE}[CREATE] $full_path${NC}"
    elif [[ "$line" =~ ^\./ ]]; then
        # Existing file being updated (starts with ./)
        echo -e "${GREEN}[UPDATE] $full_path${NC}"
    fi
}

# Copy all files and directories except LICENSE and README.md
if [ "$DRY_RUN" = true ]; then
    echo -e "${YELLOW}üìã Analyzing changes (excluding LICENSE and README.md)...${NC}"
else
    echo -e "${YELLOW}üìã Copying files (excluding LICENSE and README.md)...${NC}"
fi


# Function to check if an item should be excluded
is_excluded() {
    local item="$1"
    for exclude in "${EXCLUDE_ITEMS[@]}"; do
        if [[ "$item" == "$exclude" ]]; then
            return 0  # Item is excluded
        fi
    done
    return 1  # Item is not excluded
}

# Function to check if a file should always be ignored
is_always_ignored() {
    local item="$1"
    for ignore_pattern in "${ALWAYS_IGNORE_FILES[@]}"; do
        if [[ "$item" == $ignore_pattern ]]; then
            return 0  # Item should be ignored
        fi
    done
    return 1  # Item is not ignored
}

# Function to format rsync output for dry-run
format_rsync_output() {
    local line="$1"
    local target_path="$2"
    
    # Skip empty lines and summary lines
    if [[ -z "$line" || "$line" =~ ^(sending|receiving|sent|total|Transfer) ]]; then
        return
    fi
    
    # Skip the useless "./" entry and directory entries
    if [[ "$line" == "./" ]] || [[ "$line" =~ /$ ]]; then
        return
    fi
    
    # Parse rsync output
    if [[ "$line" =~ ^deleting\ (.+)$ ]]; then
        echo -e "${RED}[DELETE] $target_path/${BASH_REMATCH[1]}${NC}"
    elif [[ "$line" =~ ^\./(.+)$ ]]; then
        # File exists in destination, being updated
        echo -e "${GREEN}[UPDATE] $target_path/${BASH_REMATCH[1]}${NC}"
    elif [[ "$line" =~ ^[^/].*$ ]] && [[ ! "$line" =~ ^(sending|receiving|sent|total|Transfer) ]]; then
        # Check if this is actually an update by testing if file exists in destination
        local full_target_path="$target_path/$line"
        if [[ -e "$full_target_path" ]]; then
            echo -e "${GREEN}[UPDATE] $full_target_path${NC}"
        else
            echo -e "${PURPLE}[CREATE] $full_target_path${NC}"
        fi
    fi
}

# Build rsync command with appropriate flags
RSYNC_CMD="rsync -av"
if [ "$SYNC_MODE" = true ]; then
    RSYNC_CMD="$RSYNC_CMD --delete"
    if [ "$DRY_RUN" = false ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Sync mode: Will remove files from destination that don't exist in source${NC}"
    fi
fi

if [ "$DRY_RUN" = true ]; then
    RSYNC_CMD="$RSYNC_CMD --dry-run"
fi

# Process each item in the source directory
for item in "$SCRIPT_DIR"/*; do
    # Get just the filename/dirname
    item_name=$(basename "$item")
    
    # Skip if item should be excluded
    if is_excluded "$item_name"; then
        continue
    fi
    
    # Determine target path
    if [[ -d "$item" ]]; then
        # It's a directory
        target_path="$TARGET_DIR/$item_name"
        source_path="$item/"
        
        # Build rsync command with always-ignore exclusions
        RSYNC_CMD_WITH_IGNORES="$RSYNC_CMD"
        for ignore_pattern in "${ALWAYS_IGNORE_FILES[@]}"; do
            RSYNC_CMD_WITH_IGNORES="$RSYNC_CMD_WITH_IGNORES --exclude='$ignore_pattern'"
        done
        
        if [ "$DRY_RUN" = true ]; then
            # Show what would happen
            $RSYNC_CMD_WITH_IGNORES "$source_path" "$target_path" 2>&1 | while IFS= read -r line; do
                # Skip lines that contain ignored files
                skip_line=false
                for ignore_pattern in "${ALWAYS_IGNORE_FILES[@]}"; do
                    if [[ "$line" == *"$ignore_pattern"* ]] || [[ "$line" == *".tmp" ]] || [[ "$line" == *".log" ]] || [[ "$line" == *".swp" ]] || [[ "$line" == *".swo" ]] || [[ "$line" == *"~" ]]; then
                        skip_line=true
                        break
                    fi
                done
                if [ "$skip_line" = false ]; then
                    format_rsync_output "$line" "$target_path"
                fi
            done
        else
            # Actually perform the sync with filtered output
            $RSYNC_CMD_WITH_IGNORES "$source_path" "$target_path" 2>&1 | while IFS= read -r line; do
                # Skip summary lines and ignored files
                if [[ "$line" =~ ^(sending|receiving|sent|total|Transfer) ]] || [[ "$line" == "./" ]] || [[ "$line" == "" ]]; then
                    continue
                fi
                # Skip lines that contain ignored files
                skip_line=false
                for ignore_pattern in "${ALWAYS_IGNORE_FILES[@]}"; do
                    if [[ "$line" == *"$ignore_pattern"* ]] || [[ "$line" == *".tmp" ]] || [[ "$line" == *".log" ]] || [[ "$line" == *".swp" ]] || [[ "$line" == *".swo" ]] || [[ "$line" == *"~" ]]; then
                        skip_line=true
                        break
                    fi
                done
                if [ "$skip_line" = false ]; then
                    format_rsync_output "$line" "$target_path"
                fi
            done
        fi
    else
        # It's a file - check if it should be always ignored
        if is_always_ignored "$item_name"; then
            continue
        fi
        
        target_path="$TARGET_DIR"
        source_path="$item"
        
        if [ "$DRY_RUN" = true ]; then
            # Show what would happen
            $RSYNC_CMD "$source_path" "$target_path" 2>&1 | while IFS= read -r line; do
                format_rsync_output "$line" "$target_path"
            done
        else
            # Actually perform the sync with filtered output
            $RSYNC_CMD "$source_path" "$target_path" 2>&1 | while IFS= read -r line; do
                # Skip summary lines and ignored files
                if [[ "$line" =~ ^(sending|receiving|sent|total|Transfer) ]] || [[ "$line" == "./" ]] || [[ "$line" == "" ]]; then
                    continue
                fi
                format_rsync_output "$line" "$target_path"
            done
        fi
    fi
done

if [ "$DRY_RUN" = true ]; then
    echo -e "${YELLOW}‚úÖ Dry run completed successfully!${NC}"
    echo
    echo -e "${BLUE}üìù Summary:${NC}"
    echo -e "  ‚Ä¢ Analyzed changes for $TARGET_DIR"
    echo -e "  ‚Ä¢ Excluded LICENSE and README.md as requested"
    echo -e "  ‚Ä¢ Mode: $([ "$SYNC_MODE" = true ] && echo "sync (would remove extra files)" || echo "merge (would add/update only)")"
    echo -e "  ‚Ä¢ No actual changes were made"
    echo
    echo -e "${YELLOW}üí° Next steps:${NC}"
    echo -e "  ‚Ä¢ Run without --dry-run to apply these changes"
    echo -e "  ‚Ä¢ Your claude-code configuration will be ready to use"
else
    echo -e "${GREEN}‚úÖ Deployment completed successfully!${NC}"
    echo
    echo -e "${BLUE}üìù Summary:${NC}"
    echo -e "  ‚Ä¢ Copied all agents and config files to $TARGET_DIR"
    echo -e "  ‚Ä¢ Excluded LICENSE and README.md as requested"
    echo -e "  ‚Ä¢ Mode: $([ "$SYNC_MODE" = true ] && echo "sync (removed extra files)" || echo "merge (add/update only)")"
    echo -e "  ‚Ä¢ Your claude-code configuration is now ready to use"
    echo
    echo -e "${YELLOW}üí° Next steps:${NC}"
    echo -e "  ‚Ä¢ Restart Claude Code to load the new configuration"
    echo -e "  ‚Ä¢ Your global instructions and agents are now available"
fi
